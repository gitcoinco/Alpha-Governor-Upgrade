name: CI

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main

env:
  FOUNDRY_PROFILE: ci

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Build contracts
        run: |
          forge --version
          forge build --sizes

  test:
    runs-on: ubuntu-latest
    env:
      DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
      MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
      PROPOSER_PRIVATE_KEY: ${{ secrets.PROPOSER_PRIVATE_KEY }}
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Create cache folder
        run: mkdir -p ~/.foundry/cache/rpc

      # https://twitter.com/PaulRBerg/status/1611116650664796166
      - name: Generate fuzz seed with 1 week TTL
        run: >
          echo "FOUNDRY_FUZZ_SEED=$(
            echo $(($EPOCHSECONDS - $EPOCHSECONDS % 604800))
          )" >> $GITHUB_ENV

      - name: Run tests
        run: forge test

  coverage:
    env:
      DEPLOYER_PRIVATE_KEY: ${{ secrets.DEPLOYER_PRIVATE_KEY }}
      MAINNET_RPC_URL: ${{ secrets.MAINNET_RPC_URL }}
      PROPOSER_PRIVATE_KEY: ${{ secrets.PROPOSER_PRIVATE_KEY }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Run coverage
        run: forge coverage --report summary --report lcov

  fmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Install scopelint
        uses: engineerd/configurator@v0.0.8
        with:
          name: scopelint
          repo: ScopeLift/scopelint
          fromGitHubReleases: true
          version: latest
          pathInArchive: scopelint-x86_64-linux/scopelint
          urlTemplate: https://github.com/ScopeLift/scopelint/releases/download/{{version}}/scopelint-x86_64-linux.tar.xz
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Check formatting
        run: |
          scopelint --version
          scopelint check

  slither-analyze:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Run Slither
        uses: crytic/slither-action@v0.2.0
        id: slither # Required to reference this step in the next step.
        with:
          fail-on: none # Required to avoid failing the CI run regardless of findings.
          sarif: results.sarif
          slither-args: --filter-paths "./lib|./test" --exclude naming-convention,solc-version

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}
